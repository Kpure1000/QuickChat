package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import function.Debug;
import function.StartServer;
import view.listUI.FriendListCell;
import view.listUI.ListPanel;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import java.util.Random;

public class ServerView {
    private JPanel rootPanel;
    private JPanel centerPanel;
    private JPanel southPanel;
    private JPanel northPanel;
    private JLabel userListTitle;
    private JScrollPane JSP_list;
    private JPanel leftPanel;
    private JPanel rightPanel;

    public ServerView() {
        JFrame jf = new JFrame();
        jf.setVisible(true);
        jf.setLocation(0, 0);
        jf.setSize(new Dimension(800, 600));
        jf.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        jf.setTitle("QuickChat服务器");
        jf.setAlwaysOnTop(true);
        jf.add(rootPanel);

        Random rd = new Random(Calendar.getInstance().getTimeInMillis());
        ListPanel userList = new ListPanel();
        for (int i = 0; i < 15; i++) {
            FriendListCell newCell = new FriendListCell(new ImageIcon("image/h"
                    + (Math.abs(rd.nextInt() % 14) + 1) + ".jpg"),
                    "用户" + (i + 1), "asd", friendListCell -> {
                userList.setLastSelectedCell(friendListCell);
                // TODO 右边信息切换
            });
            newCell.setEnabled(true);
            userList.insertCell(newCell);
        }
        ((GridLayout) userList.getLayout()).setVgap(8);

        JSP_list.setViewportView(userList);

        startServer = new StartServer();

        jf.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                startServer.CloseServer();
                Debug.Log("服务器已关闭");
                super.windowClosed(e);
                System.exit(0);
            }
        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new BorderLayout(0, 0));
        centerPanel = new JPanel();
        centerPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(centerPanel, BorderLayout.CENTER);
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setDividerLocation(240);
        splitPane1.setResizeWeight(0.5);
        centerPanel.add(splitPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        leftPanel = new JPanel();
        leftPanel.setLayout(new BorderLayout(0, 0));
        splitPane1.setLeftComponent(leftPanel);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        leftPanel.add(panel1, BorderLayout.NORTH);
        userListTitle = new JLabel();
        userListTitle.setText("在线用户");
        panel1.add(userListTitle, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        leftPanel.add(panel2, BorderLayout.CENTER);
        JSP_list = new JScrollPane();
        panel2.add(JSP_list, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        rightPanel = new JPanel();
        rightPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane1.setRightComponent(rightPanel);
        southPanel = new JPanel();
        southPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(southPanel, BorderLayout.SOUTH);
        northPanel = new JPanel();
        northPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(northPanel, BorderLayout.NORTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    StartServer startServer;
}
